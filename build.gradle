buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            name = "forge"
            url = "https://files.minecraftforge.net/maven"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
    }
}

apply plugin: 'java'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'

group= "net.jmorg.garbageenergy"
archivesBaseName = "GarbageEnergy"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

// Define properties file
ext.configFile = file "build.properties"
configFile.withReader {
    // Load config. It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

repositories {
    maven {
        name = "CoFH Maven"
        url = "https://maven.covers1624.net"
    }
    maven {
        name = "JEI Maven"
        url = "https://dvs1.progwml6.com/files/maven"
    }
    maven {
        url = "https://repo.spongepowered.org/repository/maven-public/"
    }
    maven {
        url = "https://www.cursemaven.com"
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:' + config.mc_version + "-" + config.forge_version

    compile "cofh:RedstoneFlux:${config.rf_mc_version}-${config.rf_version}:deobf"
    compile "cofh:CoFHCore:${config.mc_version}-${config.cofh_core_version}:deobf"
    compile "cofh:ThermalFoundation:${config.mc_version}-${config.tf_version}:deobf"

    compile "mezz.jei:jei_${config.jei_mc_version}:${config.jei_version}"
}

//Pull the mod version from code.
version = "${config.mc_version}-${config.mod_version}"
println "Starting build of ${archivesBaseName}. Version: ${version}." + (System.getenv("BUILD_NUMBER") ?: "1")
println "Using Forge ${config.forge_version}, for Minecraft ${config.mc_version}"

minecraft {
    mappings channel: config.mappings, version: config.mappings_version

    runs {
        client {
            workingDirectory project.file(".minecraft-" + config.mc_version)
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }

        server {
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
        }
    }

//    version = config.mc_version + "-" + config.forge_version
//    mappings = config.mappings
//    runDir = ".minecraft-" + config.mc_version
//    replace '${mod_version}', project.config.mod_version
//    makeObfSourceJar = false
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", config.mc_version + "-" + config.forge_version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version':project.version, 'mcversion':config.mc_version + "-" + config.forge_version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title": archivesBaseName,
                "Specification-Vendor": "jikoto",
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"jikoto",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}